ЧАСТЬ 1: Разработка REST API
Функциональность
Разработайте REST API для управления студентами на Python с использованием библиотеки Flask (app.py), с сохранением данных
 в файле students.csv. API должен поддерживать запросы GET, POST, PUT, PATCH и DELETE. Каждый 
 студент должен иметь поля: id, имя, фамилия и возраст.
HTTP-запросы
GET

Получение информации о конкретном студенте (отображение всей доступной информации):


По его ID; если указанный ID не найден в CSV-файле, вернуть ошибку.
По фамилии; если есть несколько студентов с одинаковой фамилией, отобразить всех; если указанная
 фамилия не найдена в CSV-файле, вернуть ошибку.


Получение списка всех студентов (отображение всей доступной информации).

POST

Создание нового студента.


Поле ID должно автоматически генерироваться с инкрементом +1.
Тело POST-запроса должно включать имя, фамилию и возраст.
Если передано несуществующее поле или не передано ни одного поля, вернуть ошибку.
Если какие-либо поля отсутствуют в теле POST-запроса, вернуть ошибку без записи в CSV-файл.
При успешном запросе вернуть информацию о добавленном студенте.

PUT

Обновление информации о студенте по его ID.


Должна быть возможность обновить поля имени, фамилии и возраста.
Если указанный ID не найден в CSV-файле, вернуть ошибку.
Тело PUT-запроса должно включать имя, фамилию и возраст соответственно.
Если передано несуществующее поле или не передано ни одного поля, вернуть ошибку.
При успешном запросе вернуть обновленную информацию о студенте.

PATCH

Обновление возраста студента по его ID.


Должна быть возможность обновить поле возраста.
Если указанный ID не найден в CSV-файле, вернуть ошибку.
Тело PATCH-запроса должно включать возраст.
Если передано несуществующее поле или не передано ни одного поля, вернуть ошибку.
При успешном запросе вернуть обновленную информацию о студенте.

DELETE

Удаление студента из CSV-файла по его ID.


Если указанный ID не найден в CSV-файле, вернуть ошибку.
При успешном запросе вернуть сообщение, подтверждающее успешное удаление студента.

ЧАСТЬ 2: Создание test_requests.py
Функциональность
Создайте файл test_requests.py для проверки созданного REST API. В этом файле продемонстрируйте функциональность всех методов с использованием библиотеки requests в следующей последовательности:

Получение всех существующих студентов (GET).
Создание трех студентов (POST).
Получение информации о всех существующих студентах (GET).
Обновление возраста второго студента (PATCH).
Получение информации о втором студенте (GET).
Обновление имени, фамилии и возраста третьего студента (PUT).
Получение информации о третьем студенте (GET).
Получение всех существующих студентов (GET).
Удаление первого пользователя (DELETE).
Получение всех существующих студентов (GET).

Отобразите результаты выполнения в консоли и запишите их в файл results.txt.
В результате вы должны загрузить на GitHub:

app.py
test_requests.py
results.txt
requirements.txt
Скриншоты выполнения

Would you like me to explain how to run this project or discuss any specific part of the implementation?