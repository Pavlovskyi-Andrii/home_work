stages:
  - build
  - test
  - deploy-infrastructure
  - deploy-app
  - verify

variables:
  DOCKER_IMAGE: $CI_REGISTRY_IMAGE:$CI_COMMIT_REF_SLUG
  KUBE_NAMESPACE: default

build:
  stage: build
  image: docker:24.0
  services:
    - docker:24.0-dind
  variables:
    DOCKER_TLS_CERTDIR: ""
  before_script:
    - echo "Building image $DOCKER_IMAGE"
    - docker login -u $CI_REGISTRY_USER -p $CI_REGISTRY_PASSWORD $CI_REGISTRY
  script:
    - docker build -t $DOCKER_IMAGE .
    - docker push $DOCKER_IMAGE
    - echo "Image pushed successfully: $DOCKER_IMAGE"
  only:
    - main

test:
  stage: test
  image: python:3.10-slim
  before_script:
    - apt-get update && apt-get install -y default-mysql-client
    - pip install -r requirements.txt
  script:
    - python -m pytest tests/ -v --tb=short --junitxml=test-results.xml
    - echo "All tests passed!"
  artifacts:
    reports:
      junit: test-results.xml
    when: always
  only:
    - main

deploy-infrastructure:
  stage: deploy-infrastructure
  image: bitnami/kubectl:latest
  before_script:
    - mkdir -p ~/.kube
    - echo "$KUBE_CONFIG" | base64 -d > ~/.kube/config
    - kubectl version --client
  script:
    - echo "Creating ConfigMap and Secrets..."
    - kubectl apply -f k8s/config-map.yaml --namespace=$KUBE_NAMESPACE
    - kubectl apply -f k8s/secrets.yaml --namespace=$KUBE_NAMESPACE
    
    - echo "Creating Persistent Volumes..."
    - kubectl apply -f k8s/mysql-pv.yaml --namespace=$KUBE_NAMESPACE
    - kubectl apply -f k8s/app-pv.yaml --namespace=$KUBE_NAMESPACE
    
    - echo "Deploying MySQL..."
    - kubectl apply -f k8s/mysql-deployment-with-pv.yaml --namespace=$KUBE_NAMESPACE
    
    - echo "Waiting for MySQL to be ready..."
    - kubectl wait --for=condition=available --timeout=300s deployment/mysql-deployment --namespace=$KUBE_NAMESPACE
    
    - kubectl get pv,pvc --namespace=$KUBE_NAMESPACE
  only:
    - main
  when: manual

deploy-app:
  stage: deploy-app
  image: bitnami/kubectl:latest
  before_script:
    - mkdir -p ~/.kube
    - echo "$KUBE_CONFIG" | base64 -d > ~/.kube/config
  script:
    - sed -i "s|flask-mysql-app:simple|$DOCKER_IMAGE|g" k8s/flask-deployment-with-pv.yaml
    
    - echo "Deploying Flask application..."
    - kubectl apply -f k8s/flask-deployment-with-pv.yaml --namespace=$KUBE_NAMESPACE
    
    - echo "Waiting for deployment..."
    - kubectl rollout status deployment/flask-deployment --namespace=$KUBE_NAMESPACE --timeout=300s
    
    - kubectl get deployments,services,pods --namespace=$KUBE_NAMESPACE
  needs:
    - build
    - test
  only:
    - main

verify:
  stage: verify
  image: curlimages/curl:latest
  script:
    - echo "Deployment verification completed"
    - echo "Access app: minikube service flask-service"
  needs:
    - deploy-app
  only:
    - main
